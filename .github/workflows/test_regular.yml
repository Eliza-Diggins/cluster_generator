name: Fetch and Use Test Answers

on:
  push:
    branches:
      - '*'
  workflow_dispatch:  # Allows manual triggering of this workflow from the GitHub Actions interface

jobs:
  # FETCHING
  # ======================
  fetch-and-use-answers:
    runs-on: ${{ matrix.os }}  # Defines the operating systems on which the jobs will run
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Specifies the operating systems to test on
        python-version: ['3.9', '3.10', '3.11']  # Specifies the Python versions to test with

    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Check out repository
      uses: actions/checkout@v2

    # BUILD TOOLS
    # ====================
    # These need to be incorporated to ensure that Cython modules
    # can be compiled correctly. Each OS needs a separate implementation.
    - name: Install build tools on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install build tools on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install gcc

    # GITHUB CLI
    # ========================
    # We use GITHUB CLI to ensure that
    # artifacts are accessible between workflows.
    - name: Install GitHub CLI
      run: |
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
        sudo apt-add-repository https://cli.github.com/packages
        sudo apt update
        sudo apt install gh


    # ENVIRONMENT CONSTRUCTION
    # =========================
    # requirements.txt used for optional (developer) dependencies.
    # cython is compiled in place to ensure that if it fails, we get an
    # error for it.
    - name: Upgrade pip and install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        pip install -r requirements.txt

    - name: Install Cython
      run: pip install cython

    - name: Build Cython extensions
      run: python setup.py build_ext --inplace

    - name: Install the package
      run: pip install .

    - name: Define CG_VERSION environment variable
      run: echo "CG_VERSION=$(python -c 'import importlib.metadata; print(importlib.metadata.version("cluster_generator"))')" >> $GITHUB_ENV

    # ARTIFACT MANAGEMENT
    # =======================
    # We need to use GH-CLI to find the matching artifact for the test.
    - name: Authenticate GitHub CLI
      run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

    - name: Find and download latest artifact
      run: |
        artifact_url=$(gh api -X GET repos/${{ github.repository }}/actions/artifacts | jq -r --arg ref_name "${{ github.ref_name }}" --arg os "${{ matrix.os }}" --arg py_ver "${{ matrix.python-version }}" --arg cg_ver "${{ env.CG_VERSION }}" '.artifacts | map(select(.name == "answers-\($ref_name)-\($py_ver)-\($os)-\($cg_ver)")) | .[0] | .archive_download_url')
        if [[ -n "$artifact_url" && "$artifact_url" != "null" ]]; then
          curl -L -o answers.tar.gz -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $artifact_url
        else
          echo "No artifact found matching criteria."
          exit 1
        fi

    - name: Unpack test answers
      if: success()  # Only run if the previous step succeeds
      run: |
        mkdir -p ./answers
        tar -xzf answers.tar.gz -C ./answers

    - name: Run tests using fetched answers
      if: success()  # Only run if the previous step succeeds
      run: |
        pytest "./cluster_generator" --answer_dir='./answers' -m "not slow"
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        OS_NAME: ${{ matrix.os }}
        CG_VERSION: ${{ env.CG_VERSION }}
