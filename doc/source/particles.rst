.. _particles:

Generating Particle Distributions from Cluster Models
-----------------------------------------------------

Generating Particles
====================

Once a :class:`~cluster_generator.virial.VirialEquilibrium` object is created,
it can be used to generate particle positions and velocities. The positions are
generated by drawing uniform random numbers :math:`u \in [0, 1]`, and inverting
the equation :math:`u = M(<r)/M_{\rm tot}` to find the radius :math:`r`. Since
the cluster is spherically symmetric, the particle positions are isotropically
distributed in the tangential directions :math:`\theta` and :math:`\phi`. 

To generate the particle speeds, the distribution function :math:`f({\cal E})`
is used with uniform random numbers :math:`u \in [0, 1]` via an 
acceptance-rejection method. The particle velocity components are isotropically
distributed in the tangential directions :math:`\theta` and :math:`\phi`.

The :meth:`~cluster_generator.virial.VirialEquilibrium.generate_particles`
method carries out these functions, and also assigns particle masses, given
the number of particles one wishes to be generated:

.. code-block:: python
    
    n_dm = 1000000 # number of particles to generate
    dm_particles = vir.generate_particles(n_dm)

By default, this method will only determine particle positions, velocities,
and masses. If you want to add a field with the particle gravitational
potential, set ``compute_potential=True``. If you want to limit the
generation of particles to within a certain radius, set ``r_max`` equal to
the desired radius in kpc (otherwise the maximum radius will be value 
which was originally supplied in the creation of the
:class:`~cluster_generator.virial.VirialEquilibrium` object):

.. code-block:: python

    n_dm = 1000000 # number of particles to generate (now within r_max)
    r_max = 5000.0 # maximum radius of particles in kpc
    dm_particles = vir.generate_particles(n_dm, r_max=r_max, 
                                          compute_potential=True)

The object returned by 
:meth:`~cluster_generator.virial.VirialEquilibrium.generate_particles` is
a :class:`~cluster_generator.cluster_particles.ClusterParticles` object,
which is covered in more detail in :ref:`particles`.